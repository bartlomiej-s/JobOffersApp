@model WebApplication1.Models.JobOfferCreateView

@{
    ViewData["Title"] = "Create";
}

<div class="row page-box">
    <div class="col-sm-12">
        <h2>New Job Offer</h2>
        @using (Html.BeginForm("Create", "JobOffer", null, FormMethod.Post, true, new { id = "Form" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.LabelFor(m => m.JobTitle)
                @Html.EditorFor(m => m.JobTitle, new { htmlAttributes = new { @class = "form-control", required = "true", minlength = "2", maxlength = "30" } })
                @Html.ValidationMessageFor(m => m.JobTitle, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Company)
                @Html.DropDownListFor(m => m.CompanyId,
                    Model.Companies.Select(c => new SelectListItem {Text =c.Name, Value = c.Id.ToString() }),
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CompanyId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Location)
                @Html.EditorFor(m => m.Location, new { htmlAttributes = new { @class = "form-control", minlength = "2", maxlength = "50" } })
                @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.SalaryFrom, "Salary")
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="salary1">PLN</span>
                    </div>
                    @Html.EditorFor(m => m.SalaryFrom, new { htmlAttributes = new { @class = "form-control", placeholder = "From", type = "number", number = "true", min = "0", step = "1" } })
                    <div class="input-group-append">
                        <span class="input-group-text">.00</span>
                    </div>
                </div>
                @Html.ValidationMessageFor(m => m.SalaryFrom, "", new { @class = "text-danger" })
                @if (Model.wrongSalaryFrom)
                {
                    <span style="color:#DC3545">Wrong value of SalaryFrom</span>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.SalaryTo, "Salary")
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="salary1">PLN</span>
                    </div>
                    @Html.EditorFor(m => m.SalaryTo, new { htmlAttributes = new { @class = "form-control", placeholder = "To", type = "number", number = "true", min = "0", step = "1" } })
                    <div class="input-group-append">
                        <span class="input-group-text">.00</span>
                    </div>
                </div>
                @Html.ValidationMessageFor(m => m.SalaryTo, "", new { @class = "text-danger" })
                @if (Model.wrongSalaryTo)
                {
                    <span style="color:#DC3545">Wrong value of SalaryTo</span>
                    <br />
                }
                @if (Model.wrongSalaries)
                {
                    <span style="color:#DC3545">SalaryFrom cannot be greater than SalaryTo</span>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ValidUntil)
                <div class="input-group">
                    @Html.EditorFor(m => m.ValidUntil, new { htmlAttributes = new { @class = "form-control", type = "Date", date = "true" } })
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-calendar-day"></i></span>
                    </div>
                </div>
                @Html.ValidationMessageFor(m => m.ValidUntil, "", new { @class = "text-danger" })
                @if (Model.wrongValidUntil)
                {
                    <span style="color:#DC3545">ValidUntil cannot be a past date</span>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = "Enter description", required = "true", minlength = "5", maxlength = "1000" })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>
            <a asp-area="" asp-controller="JobOffer" asp-action="Index">
                <button type="button" class="btn btn-rounded btn-secondary mr-2">
                    <i class="fas fa-chevron-left pr-2"></i>
                    Cancel
                </button>
            </a>
            <button type="submit" class="btn btn-rounded btn-primary">
                <i class="fas fa-check pr-2"></i>
                Save
            </button>
        }
    </div>
</div>

@section Scripts{
<script>
    $("#Form").validate();
</script>
}